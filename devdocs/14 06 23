One other nice trick I can do with these as classes is multiple parts in one file. This will work well specifically for dealing with utility processors. e.g. here is the "conert this list to a pie chart" processor. Here's the graphing processor. the processor that take a color and returns a moose. etc.

I am clever! what do you know. So the bible pluggin has a problem that I never solved in away that was satisfying. It has external files in needs to reference. In the case of the database, that's fine, almost expected. In the case of the csv that is used for the reading schedule, that is not quite so desireable. So I had to just hard code it and you were required to leave the reading schedule in the pluggin's local directory. Now however, I have the ability to initialize the bible reading pluggin. I can have it be sent the location of the reading schedule so that can be just one of the options. Excellent. As for where that information is stored, I've got a plan there too. When describing the network, included in the network description can be little bits of configuration information for each pluggin. This also allows for multiple instances of the same pluggin. Here is the bible reading pluggin for my personal schedule, here is the one that I need for class, etc. Same with tldrnews. I can have it's categories softcoded this way.

Alright. I updated my three existing inputs to work as a classes. I'm excited for this approach. It hold great promise to actually be really quite useful, and does really take out a lot of the problems I was facing. Now hopefully Megan will be on board and give me reason to be spurred on. 
